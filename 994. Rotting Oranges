class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<pair<int, int>, int>> my_queue;
        int max_depth = 0;
        int depth = 0;
        int row, col;
        for (row = 0; row < grid.size(); ++row) {
            for (col = 0; col < grid[0].size(); ++col) {
                if (grid[row][col] == 2) {
                    my_queue.push(make_pair((make_pair(row, col)), depth));
                }
            }
        }
        
        while (!my_queue.empty()) {
            row = my_queue.front().first.first;
            col = my_queue.front().first.second;
            depth = my_queue.front().second;
            my_queue.pop();
            if (row > 0 && grid[row - 1][col] == 1) {
                grid[row - 1][col] = 2;
                my_queue.push(make_pair(make_pair(row - 1, col), depth + 1));
            }
            if (col > 0 && grid[row][col - 1] == 1) {
                grid[row][col - 1] = 2;
                my_queue.push(make_pair(make_pair(row, col - 1), depth + 1));
            }
            if (row < grid.size() - 1 && grid[row + 1][col] == 1) {
                grid[row + 1][col] = 2;
                my_queue.push(make_pair(make_pair(row + 1, col), depth + 1));
            }
            if (col < grid[0].size() - 1 && grid[row][col + 1] == 1) {
                grid[row][col + 1] = 2;
                my_queue.push(make_pair(make_pair(row, col + 1), depth + 1));
            }
            max_depth = max(max_depth, depth);
            // cout << depth;
        }
        
        for (int row = 0; row < grid.size(); ++row) {
            for (int col = 0; col < grid[0].size(); ++col) {
                if (grid[row][col] == 1) {
                    // cout << row << col;
                    return -1;
                }
            }
        }
        
        return max_depth;
    }
};
