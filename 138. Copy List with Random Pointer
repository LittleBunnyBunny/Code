/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
private:
    unordered_map<Node*, Node*> visited_node;
public:
    Node* copyRandomList(Node* head) {
        if (head == NULL) {
            return NULL;
        }
        if (visited_node.count(head)) {
            return visited_node[head];
        }
        Node* node = new Node(head -> val, nullptr, nullptr);
        visited_node[head] = node;
        node -> next = copyRandomList(head -> next);
        node -> random = copyRandomList(head -> random);
        return node;
    }
};


