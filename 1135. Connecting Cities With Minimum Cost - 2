class Solution {
public:
    int minimumCost(int N, vector<vector<int>>& connections) {
        vector<vector<pair<int, int>>> graph(N + 1);
        for (int i = 0; i < connections.size(); ++i) {
            graph[connections[i][0]].push_back(make_pair(connections[i][1], connections[i][2]));
            graph[connections[i][1]].push_back(make_pair(connections[i][0], connections[i][2]));
        }
        priority_queue <tuple <int,int,int>, vector <tuple <int,int,int>>, greater <tuple <int,int,int>>> minq;
        auto origin = connections[0][0];
        for (auto [to, cost] : graph[origin]) {
            minq.emplace(cost, origin, to);
        }        
        vector<bool> visited(N + 1, false);
        visited[origin] = true;
        int ans = 0;
        int edg_cnt = 0;
        while (!minq.empty()) {
            auto [cost, from, to] = minq.top();
            minq.pop();
            if (visited[to]) {
                continue;
            }
            visited[to] = true;
            ans += cost;
            ++edg_cnt;
            if (edg_cnt == N - 1) {
                return ans;
            }
            for (auto [nbor, nbor_cost] : graph[to]) {
                minq.emplace(nbor_cost, to, nbor);
            }
        }
        return -1;
    }
};
