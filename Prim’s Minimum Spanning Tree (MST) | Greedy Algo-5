#include <iostream>
using namespace std;
#define V 5 
void printMST(int parent[V], int graph[V][V]) { 
    for (int i = 1; i < V; i++)
        cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] << " \n";
}
int find_min (int key[V], int mstSet[V]) {
    int min = INT_MAX, min_index;
    for (int i = 0; i < V; ++i) {
        if (key[i] < min && mstSet[i] == false) {
            min_index = i;
            min = key[i];
        }
    }
    return min_index;
}
void primMST(int graph[V][V]) {
    int parent[V];
    int key[V];
    int mstSet[V];
    for (int i = 0; i < V - 1; ++i) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }
    key[0] = 0;
    parent[0] = -1;
    int u;
    for (int count = 0; count < V - 1; ++count) {
        u = find_min(key, mstSet);
        mstSet[u] = true;
        for (int i = 0; i < V; ++i) {
            if (graph[u][i] && mstSet[i] == false && graph[u][i] < key[i]) {
                key[i] = graph[u][i];
                parent[i] = u;
            }
        }
    }
    printMST(parent, graph);
}

int main()
{
    int graph[V][V] = { { 0, 2, 0, 6, 0 },
                        { 2, 0, 3, 8, 5 },
                        { 0, 3, 0, 0, 7 },
                        { 6, 8, 0, 0, 9 },
                        { 0, 5, 7, 9, 0 } };

    // Print the solution  
    primMST(graph);

    return 0;
}
