/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void convertToArray (ListNode* head, vector<int>& my_vector) {
        while (head) {
            my_vector.push_back(head -> val);
            head = head -> next;
        }
    }
    
    TreeNode* convertToBST (int left, int right, vector<int>& my_vector) {
        if (left > right) return NULL;
        int mid = left + (right - left) / 2;
        TreeNode* node = new TreeNode(my_vector[mid]);
        if (left == right) return node;
        node -> left = convertToBST(left, mid - 1, my_vector);
        node -> right = convertToBST(mid + 1, right, my_vector);
        return node;
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> my_vector;
        convertToArray(head, my_vector);
        for (int ele: my_vector) {
            cout << ele << ' ';
        }
        return convertToBST(0, my_vector.size() - 1, my_vector);
    }
};



