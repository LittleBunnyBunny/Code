/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* findFirstEnd (ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        if (fast -> next != NULL && fast -> next -> next != NULL) {
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        return slow;    
    }
    
    ListNode* reverseList (ListNode* head) {
        ListNode* prev = NULL;
        ListNode* cur = head;
        ListNode* next_temp;
        while (cur != NULL) {
            next_temp = cur -> next;
            cur -> next = prev;
            prev = cur;
            cur = next_temp;
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        if (head == NULL) {
            return true;
        }
        ListNode* first_half_end = findFirstEnd(head);
        ListNode* second_half_front = reverseList(first_half_end -> next);
        ListNode* second_ptr = second_half_front;
        ListNode* first_ptr = head;
        while (second_ptr != NULL && first_ptr != NULL) {
            if (first_ptr -> val == second_ptr -> val) {
                first_ptr = first_ptr -> next;
                second_ptr = second_ptr -> next;
            } else {
                return false;
            }
        }
        return true;
    }
};
