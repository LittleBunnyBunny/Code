class Solution {
    int find (vector<int>& parent, int x) {
        if (parent[x] == -1) 
            return x;
        return find(parent, parent[x]);
    }
    void union_set (vector<int> parent, int row, int col) {
        int rowset = find(parent, row);
        int colset = find(parent, col);
        if (rowset != colset)
            parent[rowset] = colset;
    }
public:
    int findCircleNum(vector<vector<int>>& M) {
        vector<int> parent(M.size(), -1);
        for (int row = 0; row < M.size(); ++row) {
            for (int col = 0; col < row; ++col) {
                if (M[row][col] == 1) {
                    union_set(parent, row, col);
                }
            }
        }
        int cnt = 0;
        for (int i = 0; i < M.size(); ++i) {
            if (parent[i] == -1) {
                ++cnt;
            }
        }
        return cnt;
    }
};
