/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    ListNode* findMiddle (ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* mid = NULL;
        while (fast != NULL && fast -> next != NULL) {
            mid = slow;
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        if (mid != NULL) {
            mid -> next = NULL;
        }
        return slow;
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        if (head == NULL) {
            return NULL;
        }
        ListNode* mid = findMiddle(head);
        TreeNode* node = new TreeNode(mid -> val);
        cout << mid -> val << ' ';
        if (head == mid) {
            return node;
        }
        node -> left = sortedListToBST(head);
        cout << head -> val;
        node -> right = sortedListToBST(mid -> next);
        cout << mid -> val;
        return node;
    }
};


