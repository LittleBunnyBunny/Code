class Solution {
public:
    /*
    int crossSum(const vector<int>& nums, int left, int right, int middle) {
        if(left == right) {return nums[left];}
        int tmpMaxLeftSum = INT_MIN;
        int tmpMaxRightSum = INT_MIN;
        int leftSubSum = 0;
        for(int i = middle; i >= left; --i) {
            leftSubSum += nums[i];
            tmpMaxLeftSum = max(tmpMaxLeftSum, leftSubSum);
        }
            
        int rightSubSum = 0;
        for(int i = middle + 1; i <= right; ++i) {
            rightSubSum += nums[i];
            tmpMaxRightSum = max(tmpMaxRightSum, rightSubSum);
        }
        
        return tmpMaxLeftSum + tmpMaxRightSum;
    }
    
    int helper(const vector<int>& nums, int left, int right) {
        if(left == right) {return nums[left];}
        int middle = left + (right - left) / 2;
        
        int leftSum = helper(nums, left, middle);
        int rightSum = helper(nums, middle + 1, right);
        int cross = crossSum(nums, left, right, middle);
        return max(max(leftSum, rightSum), cross);
    }
    */
    
    int maxSubArray(vector<int>& nums) {
        if (nums.empty()) return 0;
      //  return helper(nums, 0, nums.size() - 1);
        int currentMaxSum = nums[0];
        int maxSeen = nums[0];
        for(int i = 1; i < nums.size(); ++i) {
            currentMaxSum = max(nums[i], currentMaxSum + nums[i]);
            maxSeen = max(currentMaxSum, maxSeen);
        }
        return maxSeen;
    }
};
