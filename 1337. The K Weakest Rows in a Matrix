class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        std::map<int,std::vector<int>> map;
        vector<int> ans;
        int strength;
        for (int i = 0; i < mat.size(); ++i) {
            strength = 0;
            for (int j = 0; j < mat[0].size(); ++j) {
                if (mat[i][j] == 0) {
                    break;
                }
                strength++;
            }
            if (!map.count(strength)) {
                map[strength] = {i};
            } else {
                vector<int> index = map[strength];
                index.push_back(i);
                map[strength] = index;
            }
        }
        for (auto it = map.begin(); it != map.end(); ++it) {
            cout << it -> first << endl;
            for (int i = 0; i < it -> second.size(); ++i) {
                if (ans.size() < k) {
                    ans.push_back(it -> second[i]);
                }
            }
        }
        return ans;
    }
};
