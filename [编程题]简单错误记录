#include<iostream>
#include<string>
#include<unordered_map>
#include<vector>
#include<algorithm>
using namespace std;

int main () {
    string input_str = "", line = "";        
    //unordered_map<string, int> my_map;
    vector<pair<string,int>> my_vector;
    while (cin >> input_str >> line) {
        string parsing_str = " " + line;
        for (int i = input_str.size()-1; i >= 0; --i) {
            if (input_str[i] == '\\') {
                break;
            } else {
                parsing_str = input_str[i] + parsing_str;
            }
        }
        //my_map[parsing_str]++;
        my_vector.push_back(make_pair(parsing_str, 1));
        for (int i = 0; i < my_vector.size() - 1; ++i) {
            if (my_vector[i].first == parsing_str) {
                my_vector[i].second++;
                my_vector.pop_back();
                break;
            }
        }
    }
    //vector<pair<string, int>> my_vector(my_map.begin(), my_map.end());
    stable_sort(my_vector.begin(), my_vector.end(), [](const pair<string, int>& p1, const pair<string, int>& p2) {return p1.second > p2.second;});
     int count = 0;
    for (const auto pair : my_vector) {
        const int blank_index = pair.first.find(' ');
        if (blank_index > 16) {
            cout << pair.first.substr(blank_index-16, pair.first.size()-(blank_index-16)) << " " << pair.second << endl;
        } else {
            cout << pair.first << " " << pair.second << endl;
        }
        ++count;
        if (count == 8) {
            break;
        }
    }
    //cout << endl;
    return 0;
}



