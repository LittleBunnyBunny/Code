class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        size = 0 ;
        my_top = -1;
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        myq1.push(x);
        my_top = x;
        size++;
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
      if (size == 1) {
          int res = myq1.front();
          size--;
          return res;
      } else if (size > 1) {
          while (myq1.size() > 2) {
              myq2.push(myq1.front());
              myq1.pop();
          }
          int second_last = myq1.front();
          myq1.pop();
          my_top = second_last;
          myq2.push(second_last);
          
          int last = myq1.front();
          myq1.pop();
          while (!myq2.empty()) {
              myq1.push(myq2.front());
              myq2.pop();
          }
          size--;
          return last;
        }
        return 0;
    }
    
    /** Get the top element. */
    int top() {
        return my_top;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return size == 0;
    }
private:
    queue<int> myq1;
    queue<int> myq2;
    int size;
    int my_top;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
