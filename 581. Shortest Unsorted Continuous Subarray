class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        if (nums.size() <= 1) return 0;
        std::stack<int> mystack1;
        int first = nums.size() - 1;
        int last = 0;
        mystack1.push(nums[0]);
        for(int i = 1; i < nums.size(); ++i) {
            if (nums[i] < nums[i-1]) {
                while(!mystack1.empty() && mystack1.top() > nums[i]) {
                    mystack1.pop();
                }
                first = min(first, static_cast<int>(mystack1.size()));
            }
            mystack1.push(nums[i]);
        }
        while(!mystack1.empty()) {
            mystack1.pop();
        }
        mystack1.push(nums[nums.size() - 1]);
        for(int i = nums.size() - 2; i >= 0; --i) {
            if (nums[i] > nums[i+1]) {
                while(!mystack1.empty() && mystack1.top() < nums[i]) {
                    mystack1.pop();
                }
                last = std::max(last, static_cast<int>(nums.size() - 1 - mystack1.size()));
            }
            mystack1.push(nums[i]);
        }
        return (last <= first)? 0 : last - first + 1;
    }
};
